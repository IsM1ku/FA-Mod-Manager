// The initial state
State StartState
{
  CameraView
  {
    TrackTarget
    {
      Target = Player;
    }
  }
	
  CameraMove
  {
    FollowTarget
    {
      FollowType = UserChoice;
    }
  }

  Transitions
  {
    OnEvent OnPlayerTakedown
    {
      Goto TakedownState;
    }
    OnEvent OnPlayerDying
    {
      Goto DeathState;    
    }
  }
}

// Occurs on AI takedown event
State TakedownState 
{
  TimeStart = 0;

  EnterVFX = TakedownEnterVFX;
  ExitVFX = TakedownExitVFX;

  CameraMove
  {
    CircleXY
    {
      Pivot     = PlayerPos;
      Height    = 0.5;
      RadiusMin = 3.5;
      RadiusMax = 3.5;
      UpdateLag = 0.5;
    }
  }
  CameraView
  {
    NearThirds
    {
      Target1    = Victim;
      Target2    = Player;
      TargetBias = 0.5;
    }
  }
      
  ComposeTime
  {
    TimeMin      = 2.0;
    TimeMax      = 2.0;
    MaxMoveSpeed = 5.0;
    MaxViewSpeed = 180;

    AttainBefore
    {
      Event OnPlayerDeath;
    }
  }
      
  WatchTime
  {
    TimeMin   = 0.25;
    TimeMax   = 0.25;
    MoveSpeed = 5.;
    ViewSpeed = 180;
  }
        
  Transitions
  {
    OnEvent OnWatchTimeout
    {
      Goto StartState;
    }
    OnEvent OnVictimRespawn
    {
      Goto StartState;
    }
    // Start a new takedown if one occurs while we gloat
    OnEvent OnPlayerTakedown
    {
      Goto TakedownState;
    }
    OnEvent OnPlayerDying
    {
      Goto DeathState;    
    }
  }
}

// Occurs on player death
State DeathState 
{
  TimeStart = 0;

  // On enter, remove the HUD for ease of viewing
  EnterVFX = DeathEnterVFX;
  ExitVFX = DeathExitVFX;
  
  CameraMove
  {
    RiseAbovePlayer
    {
      Height = 15;
    }
  }
  
  CameraView
  {
    TrackTarget
    {
      Target = Player;
    }
  }
    
  ComposeTime
  {
    TimeMin = 1.5;
    TimeMax = 1.5;
  }
  WatchTime
  { // Just use a long time -- since we should respawn before this timeout
    TimeMin   = 60;
    TimeMax   = 60;
    MoveSpeed = 5;
    ViewSpeed = 180;
  }
  
  Transitions
  {
    OnEvent OnPlayerRespawn
    {
      Goto StartState;
    }
  }
}


  